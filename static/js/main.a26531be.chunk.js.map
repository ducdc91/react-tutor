{"version":3,"sources":["assets/images/avatar.JPEG","logo.svg","components/coverletter/Navbar.js","components/CoverLetter.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","menu","react_default","a","createElement","className","id","href","candidate","name","src","avatar","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","map","link","i","classes","label","push","console","log","setState","setMenu","newProps","newState","nextProps","nextState","prevProps","prevState","Component","CoverLetter","coverletter_Navbar","defaultProps","title","yearOld","job","company","App","components_CoverLetter","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a26531be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.5747ab3c.JPEG\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menu: []\n        }\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\" id=\"sideNav\">\n                <a className=\"navbar-brand js-scroll-trigger\" href=\"#page-top\">\n                    <span className=\"d-block d-lg-none\">{this.props.candidate.name}</span>\n                    <span className=\"d-none d-lg-block\">\n                            <img className=\"img-fluid img-profile rounded-circle mx-auto mb-2\" src={this.props.candidate.avatar}\n                                 alt=\"\"/>\n                        </span>\n                </a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\"\n                        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav\">\n                        {this.state.menu.map((link, i) => {\n                            return (\n                                <li className=\"nav-item\">\n                                    <a className={link.classes} href={link.href}>{link.label}</a>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n\n    setMenu() {\n        let newMenu = {\n            label: \"Awards\",\n            href: \"#awards\",\n            classes: \"nav-link js-scroll-trigger awards test-class\"\n        };\n        let menu = this.props.menu;\n        menu.push(newMenu);\n        console.log(menu);\n        this.setState({menu: menu})\n    }\n\n    componentWillMount() {\n        console.log('Component WILL MOUNT!')\n    }\n\n    componentDidMount() {\n        this.setMenu();\n        console.log('Component DID MOUNT!')\n        console.log(this.state.menu);\n    }\n\n    componentWillReceiveProps(newProps) {\n        console.log('Component WILL RECIEVE PROPS!');\n\n        console.log(this.state.menu);\n    }\n\n    shouldComponentUpdate(newProps, newState) {\n        return true;\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log('Component WILL UPDATE!');\n        console.log(this.state.menu);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('Component DID UPDATE!');\n        console.log(this.state.menu);\n    }\n\n    componentWillUnmount() {\n        console.log('Component WILL UNMOUNT!');\n        console.log(this.state.menu);\n    }\n}\n\nexport default Navbar;","import React, {Component} from 'react';\n// TODO: question: cach nhung image dung nhat\nimport avatar from '../assets/images/avatar.JPEG';\n\nimport Navbar from './coverletter/Navbar';\n\nclass CoverLetter extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <cover-letter>\n                <Navbar candidate={this.props.candidate} menu={this.props.menu} />\n            </cover-letter>\n        );\n    }\n}\n\n// Set default value of props\nCoverLetter.defaultProps = {\n    title: \"Cover Letter\",\n    candidate: {\n        name: \"Duc Dang Chung\",\n        yearOld: 28,\n        job: \"Senior Full stack PHP Developer\",\n        company: \"Shopstack\",\n        avatar: avatar\n    },\n    //TODO: get warning \"Each child in a list should have a unique \"key\" prop.\"\n    menu: [\n        {\n            label: \"About\",\n            href: \"#about\",\n            classes: \"nav-link js-scroll-trigger about test-class\"\n        },\n        {\n            label: \"Experience\",\n            href: \"#experience\",\n            classes: \"nav-link js-scroll-trigger experience test-class\"\n        },\n        {\n            label: \"Education\",\n            href: \"#education\",\n            classes: \"nav-link js-scroll-trigger\"\n        },\n        {\n            label: \"Skills\",\n            href: \"#skills\",\n            classes: \"nav-link js-scroll-trigger\"\n        },\n        {\n            label: \"Interests\",\n            href: \"#interests\",\n            classes: \"nav-link js-scroll-trigger\"\n        }\n    ]\n\n\n};\n\nexport default CoverLetter;","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\n//import Lession3 from './Lession3';\nimport CoverLetter from './CoverLetter';\nimport '../assets/bootstrap/css/bootstrap.min.css';\nimport '../assets/fontawesome-free/css/all.css';\nimport '../assets/css/resume.css';\n// TODO: question: lam sao de nhung js libs vao\n/*import '../assets/jquery/jquery.min';\nimport '../assets/bootstrap/js/bootstrap.bundle.min';\nimport '../assets/jquery-easing/jquery.easing.min';\nimport '../assets/js/resume';*/\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CoverLetter />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}